---
- name: Make sure directory exist
  file: path={{ item }} state=directory mode=0755 recurse=yes
  with_items:
    - /opt/bin
    - /opt/cni/bin
    - /etc/kubernetes/manifests
    - /etc/cni/net.d

- name: Make sure /etc/kubernetes/certs directory exist
  file: path=/etc/kubernetes/certs state=directory owner=root group=root mode=0700

- name: Install hyperkube
  file:
    src="/opt/kubernetes-v{{ kube_version }}-linux-amd64/hyperkube"
    dest=/opt/bin/hyperkube
    state=link
    force=yes
    mode=0755

- name: Install nsenter
  file:
    src="/opt/nsenter-{{ nsenter_version }}-linux-amd64/nsenter"
    dest=/usr/local/bin/nsenter
    state=link
    force=yes
    mode=0755
  when: ansible_distribution == "Ubuntu" and ansible_distribution_major_version|int < 15

- name: Set fact of IP
  set_fact:
    node_ip: "{% if public_iface is defined %}{{ hostvars[inventory_hostname]['ansible_'+public_iface]['ipv4']['address'] }}{% else %}{{ ansible_default_ipv4 }}{% endif %}"

- name: Generate kube-node certificates
  command: "/opt/bin/cert-generator.sh {{ node_ip }} {{ ansible_hostname }}"
  delegate_to: "{{ groups['masters'][0] }}"

- name: Fetch CA certificate from master
  slurp: src="/etc/kubernetes/certs/ca.crt"
  register: ca_cert
  delegate_to: "{{ groups['masters'][0] }}"

- name: Copy CA certificate to node
  copy:
    content="{{ ca_cert['content'] | b64decode }}"
    dest="/etc/kubernetes/certs/ca.crt"

- name: Fetch kubelet key from master
  slurp: src="/etc/kubernetes/certs/{{ node_ip }}.key"
  register: kubelet_key
  delegate_to: "{{ groups['masters'][0] }}"

- name: Copy kubelet key to node
  copy:
    content="{{ kubelet_key['content'] | b64decode }}"
    dest="/etc/kubernetes/certs/kubelet.key"

- name: Fetch kubelet certificate from master
  slurp: src="/etc/kubernetes/certs/kubelet.crt"
  register: kubelet_cert
  delegate_to: "{{ groups['masters'][0] }}"

- name: Copy kubelet certificate to node
  copy:
    content="{{ kubelet_cert['content'] | b64decode }}"
    dest="/etc/kubernetes/certs/kubelet.crt"

- include: load-image.yml
  when: not net_install

- include: configure.yml
  tags:
    - configure

- include: start.yml
  when: kube_modified == true

- include: restart.yml
  when: kube_modified == true and kube_started.changed == false
  tags:
    - restart
